{"version":3,"sources":["registerServiceWorker.ts","states/AppointmentsState.ts","components/LoginButton.tsx","components/Appointments.tsx","components/SendInvite.tsx","components/Main.tsx","states/LoginState.ts","states/SendInviteState.ts","index.tsx","states/MainState.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","AppointmentStatusEnum","LoginButton_LoginButton","_super","LoginButton","tslib_es6","prototype","render","this","props","isLoggedIn","react","className","nickName","type","placeholder","value","nickNameInputText","onChange","onNickNameChanged","onKeyPress","onNickNameKeyPress","onClick","onLoginButtonClicked","disabled","login","event","key","preventDefault","currentTarget","mobx_module","bound","mobx_react_module","AppointmentsState_AppointmentsState","AppointmentsState","appointments","appointmentStateChanged","newState","id","respondToAppointment","accepted","status","Accepted","Declined","axios_default","a","post","BackendBaseUri","headers","Content-Type","err","alert","Appointments_Appointments","Appointments","_this","Object","keys","reverse","map","appointment","cardBorderStyle","statusDiv","buttonsDisabled","renderParticipants","participants","result","index","indexOf","splice","length","push","i","delimiter","SendInvite_SendInvite","SendInvite","nickNamesInputText","onNickNamesChanged","onNickNamesKeyPress","sendInvite","Main_Main","Main","mainState","loginState","sendInviteState","appointmentsState","LoginState_LoginState","LoginState","signalRMessageHandler","defineProperty","signalrConn","esm","withUrl","LoginState_BackendBaseUri","build","defaults","common","on","onclose","tryToReconnect","start","setTimeout","JSON","stringify","SendInviteState_SendInviteState","SendInviteState","nickNames","SendInviteState_BackendBaseUri","appState","react_dom","href","document","getElementById","URL","toString","origin","addEventListener","fetch","response","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f2a227e.chunk.js","sourcesContent":["// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, action } from \"mobx\"\r\nimport axios from 'axios';\r\n\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\nexport enum AppointmentStatusEnum {\r\n    Pending = 0,\r\n    Accepted,\r\n    Declined\r\n}\r\n\r\n// State of one particular appointment\r\nclass AppointmentState {\r\n    // Appointment's Id. Typically it is a creation timestamp in a sortable format.\r\n    id: string = '';\r\n    // List of proposed participant's nickNames\r\n    participants: string[] = [];\r\n    // Current status of the appointment\r\n    status: AppointmentStatusEnum = AppointmentStatusEnum.Pending;\r\n}\r\n\r\n// Appointments handling logic\r\nexport class AppointmentsState {\r\n\r\n    // Appointments are stored as a dictionary\r\n    @observable\r\n    appointments: { [id: string]: AppointmentState } = {};\r\n\r\n    // Handles 'appointment-state-changed' event from server\r\n    @action.bound\r\n    appointmentStateChanged(newState: AppointmentState) {\r\n        // Simply merging the newly arrived state with the map of existing ones\r\n        this.appointments[newState.id] = { ...this.appointments[newState.id], ...newState };\r\n    }\r\n\r\n    // Sends a response about the appointment\r\n    @action.bound\r\n    respondToAppointment(id: string, accepted: boolean) {\r\n\r\n        const status = accepted ? AppointmentStatusEnum.Accepted : AppointmentStatusEnum.Declined;\r\n\r\n        // Responding to the server with Arranged status\r\n        axios.post(`${BackendBaseUri}/appointments/${id}`, status, { headers: { 'Content-Type': 'text/plain' } })\r\n            .catch(err => alert(`Failed to send a response! ${err}`));\r\n    }\r\n}","import * as React from \"react\";\r\nimport { action } from \"mobx\"\r\nimport { observer } from 'mobx-react';\r\n\r\nimport './LoginButton.css';\r\n\r\nimport { LoginState } from '../states/LoginState';\r\n\r\n// Handles login functionality, which by now is just about providing the user's nickName\r\n@observer\r\nexport class LoginButton extends React.Component<{ state: LoginState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        if (state.isLoggedIn) {\r\n            return (\r\n                <div>\r\n                    <span className=\"navbar-text ml-auto mr-3\">\r\n                        Hello, {state.nickName}\r\n                    </span>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"form-inline\">\r\n                <input className=\"form-control mr-sm-2 nickname-input\" type=\"search\" placeholder=\"Your nickname...\"\r\n                    value={state.nickNameInputText}\r\n                    onChange={this.onNickNameChanged} \r\n                    onKeyPress={this.onNickNameKeyPress} \r\n                />\r\n                <button className=\"btn btn-secondary login-button\" type=\"button\"\r\n                    onClick={this.onLoginButtonClicked}\r\n                    disabled={!state.nickNameInputText}\r\n                >\r\n                    Connect\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    @action.bound onLoginButtonClicked() {\r\n        this.props.state.login();\r\n    }\r\n\r\n    @action.bound\r\n    onNickNameKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.onLoginButtonClicked();\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    onNickNameChanged(event: React.FormEvent<HTMLInputElement>) {\r\n        this.props.state.nickNameInputText = event.currentTarget.value;\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport './Appointments.css';\r\n\r\nimport { AppointmentsState, AppointmentStatusEnum } from '../states/AppointmentsState';\r\n\r\n// View of all proposed appointments\r\n@observer\r\nexport class Appointments extends React.Component<{ nickName: string, state: AppointmentsState }> {\r\n\r\n    render(): JSX.Element[] {\r\n        const state = this.props.state;\r\n\r\n        // Ordering by appointmentId descending\r\n        const appointmentIds = Object.keys(state.appointments).reverse();\r\n\r\n        return appointmentIds.map(id => {\r\n            const appointment = state.appointments[id];\r\n\r\n            var cardBorderStyle = 'border-warning';\r\n            var statusDiv = <div className=\"alert alert-warning status-badge h5\">Pending...</div>;\r\n            var buttonsDisabled = false;\r\n            switch (appointment.status) {\r\n                case AppointmentStatusEnum.Accepted:\r\n                    cardBorderStyle = 'border-success';\r\n                    statusDiv = <div className=\"alert alert-success status-badge h5\">Agreed :)</div>;\r\n                    buttonsDisabled = true;\r\n                    break;\r\n                case AppointmentStatusEnum.Declined:\r\n                    cardBorderStyle = 'border-danger';\r\n                    statusDiv = <div className=\"alert alert-danger status-badge h5\">Declined :(</div>;\r\n                    buttonsDisabled = true;\r\n                    break;\r\n            }\r\n\r\n            return (\r\n                <div className={\"card appointment-card \" + cardBorderStyle} key={id}>\r\n                    <div className=\"card-body container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-3\">{statusDiv}</div>\r\n                            <div className=\"col-sm-5\">\r\n                                Are you going out with {this.renderParticipants(appointment.participants)} ?\r\n                            </div>\r\n                            <div className=\"col-sm-4 text-center\">\r\n                                <button className=\"btn btn-success response-button\"\r\n                                    onClick={() => state.respondToAppointment(appointment.id, true)}\r\n                                    disabled={buttonsDisabled}\r\n                                >\r\n                                    Yes\r\n                                </button>\r\n                                <button className=\"btn btn-danger response-button\"\r\n                                    onClick={() => state.respondToAppointment(appointment.id, false)}\r\n                                    disabled={buttonsDisabled}\r\n                                >\r\n                                    No\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    renderParticipants(participants: string[]): (JSX.Element | string)[] {\r\n        const result = [];\r\n\r\n        // Removing ourselves from the rendered list of participants\r\n        const index = participants.indexOf(this.props.nickName);\r\n        if (index > -1) {\r\n            participants.splice(index, 1);\r\n\r\n            // If I am the only one participant\r\n            if (!participants.length) {\r\n                participants.push('yourself');\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < participants.length; i++) {\r\n\r\n            const delimiter = i ? ((i === participants.length - 1) ? ' and ' : ', ') : '';\r\n            result.push(delimiter);\r\n            result.push(\r\n                <h1 className=\"badge badge-light participant-badge\" key={i}>{participants[i]}</h1>\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import * as React from 'react';\r\nimport { action } from \"mobx\"\r\nimport { observer } from 'mobx-react';\r\n\r\nimport './SendInvite.css';\r\n\r\nimport { SendInviteState } from '../states/SendInviteState';\r\n\r\n// Component for sending appointment invites\r\n@observer\r\nexport class SendInvite extends React.Component<{ state: SendInviteState }> {\r\n\r\n    render(): JSX.Element {\r\n        const state = this.props.state;\r\n\r\n        return (\r\n            <div className=\"card appointment-card \">\r\n                <div className=\"card-body container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-4 description-div\">\r\n                                Invite some folks to go out tonight:\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <input className=\"form-control\" type=\"search\" placeholder=\"Comma-separated nicknames...\"\r\n                                value={state.nickNamesInputText}\r\n                                onChange={this.onNickNamesChanged}\r\n                                onKeyPress={this.onNickNamesKeyPress} \r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm-4 text-center\">\r\n                            <button className=\"btn btn-success invite-button\"\r\n                                onClick={state.sendInvite}\r\n                                disabled={!state.nickNamesInputText}\r\n                            >\r\n                                Invite\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    @action.bound\r\n    onNickNamesKeyPress(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            // Otherwise the event will bubble up and the form will be submitted\r\n            event.preventDefault();\r\n\r\n            this.props.state.sendInvite();\r\n        }\r\n    }\r\n\r\n    @action.bound\r\n    onNickNamesChanged(event: React.FormEvent<HTMLInputElement>) {\r\n        this.props.state.nickNamesInputText = event.currentTarget.value;\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { MainState } from '../states/MainState';\r\n\r\nimport { Appointments } from './Appointments';\r\nimport { SendInvite } from './SendInvite';\r\n\r\n// The main application view\r\n@observer\r\nexport class Main extends React.Component<{ state: MainState }> {\r\n\r\n    render(): JSX.Element {\r\n        const mainState = this.props.state;\r\n\r\n        if (!mainState.loginState.isLoggedIn) {\r\n            return <div/>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <SendInvite state={mainState.sendInviteState} />\r\n                <Appointments nickName={mainState.loginState.nickName} state={mainState.appointmentsState} />\r\n            </div>\r\n        );\r\n    }\r\n}","import { observable, computed, action } from \"mobx\"\r\nimport axios from 'axios';\r\n\r\nimport { HubConnectionBuilder } from \"@aspnet/signalr\";\r\n\r\n// Configuration parameters coming from .env file. On your devbox you'd probably want to override them via .env.local file.\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Login/logout logic\r\nexport class LoginState {\r\n\r\n    constructor(private signalRMessageHandler: (message: any) => any) {}\r\n\r\n    @observable\r\n    nickName: string = '';\r\n\r\n    @observable\r\n    nickNameInputText: string = '';\r\n\r\n    @computed\r\n    get isLoggedIn() {\r\n        return !!this.nickName;\r\n    }\r\n\r\n    // Establishes SignalR connection and configures Axios\r\n    @action.bound\r\n    login() {\r\n        \r\n        // Configuring SignalR\r\n        const signalrConn = new HubConnectionBuilder()\r\n            .withUrl(`${BackendBaseUri}?nick-name=${this.nickNameInputText}`)\r\n            .build();\r\n        \r\n        // Also telling axios to put this name as an HTTP header into each request\r\n        axios.defaults.headers.common['x-nick-name'] = this.nickNameInputText;\r\n\r\n        // Mounting the event handler\r\n        signalrConn.on('appointment-state-changed', this.signalRMessageHandler);\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        signalrConn.onclose(() => {\r\n            var tryToReconnect = () => {\r\n                console.log('Reconnecting to SignalR...');\r\n                signalrConn.start().then(() => {\r\n                    console.log('Reconnected to SignalR!');\r\n                }, () => { \r\n                    setTimeout(tryToReconnect, 5000);\r\n                })\r\n            }\r\n            tryToReconnect();\r\n        });\r\n\r\n        // Establishing SignalR connection\r\n        signalrConn.start().then(\r\n            () => {\r\n                this.nickName = this.nickNameInputText;\r\n            }, err => {\r\n                alert(`Failed to connect to SignalR:  ${JSON.stringify(err)}`);\r\n            });\r\n    }\r\n}  ","import { observable, action } from 'mobx'\r\nimport axios from 'axios';\r\n\r\n// Configuration parameters coming from .env file. On your devbox you'd probably want to override them via .env.local file.\r\nexport const BackendBaseUri = process.env.REACT_APP_BACKEND_BASE_URI as string;\r\n\r\n// Main Application State\r\nexport class SendInviteState {\r\n\r\n    @observable\r\n    nickNamesInputText: string = '';\r\n\r\n    @action.bound\r\n    sendInvite() {\r\n\r\n        const nickNames = this.nickNamesInputText;\r\n        this.nickNamesInputText = '';\r\n\r\n        axios.post(`${BackendBaseUri}/new-appointment`, nickNames, { headers: { 'Content-Type': 'text/plain' }})\r\n            .catch(err => alert(`Failed to send an invite! ${err}`));\r\n    }\r\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\n\n// styles\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { LoginButton } from './components/LoginButton';\nimport { Main } from './components/Main';\nimport { MainState } from './states/MainState';\n\n// This is the app's global state. It consists of multiple parts, consumed by multiple nested components\nconst appState = new MainState();\n\nReactDOM.render(\n    \n    <div>\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"#\">Let's Go Out Demo</a>\n\n            <LoginButton state={appState.loginState}></LoginButton>\n        </nav>\n        <Main state={appState}></Main>\n    </div>,\n\n    document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n","import { LoginState } from './LoginState';\r\nimport { AppointmentsState } from './AppointmentsState';\r\nimport { SendInviteState } from './SendInviteState';\r\n\r\n// Main Application State\r\nexport class MainState {\r\n    appointmentsState: AppointmentsState = new AppointmentsState();\r\n    loginState: LoginState = new LoginState(this.appointmentsState.appointmentStateChanged);\r\n    sendInviteState: SendInviteState = new SendInviteState();\r\n}"],"sourceRoot":""}